/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * BumpSeedNotInHashMap: 'Bump seed not in hash map'
 *
 * @category Errors
 * @category generated
 */
export class BumpSeedNotInHashMapError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = 'BumpSeedNotInHashMap';
  constructor() {
    super('Bump seed not in hash map');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BumpSeedNotInHashMapError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new BumpSeedNotInHashMapError());
createErrorFromNameLookup.set('BumpSeedNotInHashMap', () => new BumpSeedNotInHashMapError());

/**
 * SignerNotAuthorized: 'Unauthorized signer'
 *
 * @category Errors
 * @category generated
 */
export class SignerNotAuthorizedError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = 'SignerNotAuthorized';
  constructor() {
    super('Unauthorized signer');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignerNotAuthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new SignerNotAuthorizedError());
createErrorFromNameLookup.set('SignerNotAuthorized', () => new SignerNotAuthorizedError());

/**
 * NumericalOverflowError: 'Math numerical overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowErrorError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = 'NumericalOverflowError';
  constructor() {
    super('Math numerical overflow');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowErrorError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new NumericalOverflowErrorError());
createErrorFromNameLookup.set('NumericalOverflowError', () => new NumericalOverflowErrorError());

/**
 * MintMismatch: 'The mints do not match'
 *
 * @category Errors
 * @category generated
 */
export class MintMismatchError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = 'MintMismatch';
  constructor() {
    super('The mints do not match');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new MintMismatchError());
createErrorFromNameLookup.set('MintMismatch', () => new MintMismatchError());

/**
 * PriceMismatch: 'Listing and offer prices do not match'
 *
 * @category Errors
 * @category generated
 */
export class PriceMismatchError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = 'PriceMismatch';
  constructor() {
    super('Listing and offer prices do not match');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PriceMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new PriceMismatchError());
createErrorFromNameLookup.set('PriceMismatch', () => new PriceMismatchError());

/**
 * BuyerTokenAccountMismatch: 'Buyer token account owner does not match the buyer'
 *
 * @category Errors
 * @category generated
 */
export class BuyerTokenAccountMismatchError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = 'BuyerTokenAccountMismatch';
  constructor() {
    super('Buyer token account owner does not match the buyer');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BuyerTokenAccountMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new BuyerTokenAccountMismatchError());
createErrorFromNameLookup.set(
  'BuyerTokenAccountMismatch',
  () => new BuyerTokenAccountMismatchError(),
);

/**
 * SellerTokenAccountMismatch: 'Seller token account owner does not match the seller'
 *
 * @category Errors
 * @category generated
 */
export class SellerTokenAccountMismatchError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = 'SellerTokenAccountMismatch';
  constructor() {
    super('Seller token account owner does not match the seller');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellerTokenAccountMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new SellerTokenAccountMismatchError());
createErrorFromNameLookup.set(
  'SellerTokenAccountMismatch',
  () => new SellerTokenAccountMismatchError(),
);

/**
 * RewardMintDecimalMismatch: 'The number of decimals for auction house treasury mint do not match reward mint decimals'
 *
 * @category Errors
 * @category generated
 */
export class RewardMintDecimalMismatchError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = 'RewardMintDecimalMismatch';
  constructor() {
    super(
      'The number of decimals for auction house treasury mint do not match reward mint decimals',
    );
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RewardMintDecimalMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new RewardMintDecimalMismatchError());
createErrorFromNameLookup.set(
  'RewardMintDecimalMismatch',
  () => new RewardMintDecimalMismatchError(),
);

/**
 * AuctionHouseTreasuryMismatch: 'The treasury does not match the one present on the auction house'
 *
 * @category Errors
 * @category generated
 */
export class AuctionHouseTreasuryMismatchError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = 'AuctionHouseTreasuryMismatch';
  constructor() {
    super('The treasury does not match the one present on the auction house');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AuctionHouseTreasuryMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new AuctionHouseTreasuryMismatchError());
createErrorFromNameLookup.set(
  'AuctionHouseTreasuryMismatch',
  () => new AuctionHouseTreasuryMismatchError(),
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
